<?xml version="1.0"?>

<project default = "build" basedir="." name="retsdb2">

  <!-- set global properties for this build -->
  <property name="project.name" value="retsdb2"/>
  <property name="project.version" value="0.0.1"/>
  <property name="project.string" value="${project.name}-${project.version}"/>

  <!-- This must be done before any other propertes -->
  <property file="${basedir}/build.properties" />
  <property file="${user.home}/.build.properties" />
  <property file="${basedir}/project/build.properties" />

  <fileset id="hibernate.mapping.files" dir="project/hibernate/mappings">
    <include name="**/*.hbm.xml" />
  </fileset>

  <!-- The following properties may be overriden by the user -->
  <property name="compile.optimize" value="off"/>
  <property name="compile.debug" value="on"/>
  <property name="compile.deprecation" value="off"/>
  <property name="hibernate.schema.text.only" value="yes"/>
  <property name="hibernate.schema.quiet" value="yes"/>

  <path id="hibernate.path">
    <pathelement path="${commons-lang.jar}"/>
    <pathelement path="${hibernate.jar}"/>
    <pathelement path="${log4j.jar}"/>
    <pathelement path="${antlr.jar}"/>
  </path>

  <path id="lib.path">
    <pathelement path="${commons-lang.jar}"/>
    <pathelement path="${hibernate.jar}"/>
    <pathelement path="${hibernate.jdbc.jar}"/>
    <fileset dir="${hibernate.lib}" includes="*.jar"/>
    <pathelement path="${hibernate-ext.tools.jar}"/>
    <pathelement path="${jdom.jar}"/>
    <pathelement path="${log4j.jar}"/>
  </path>

  <path id="embedded.path">
    <fileset dir="${tomcat.home}/server/lib" includes="*.jar"/>
  </path>

  <path id="importer.path">
    <pathelement path="build/hibernate/classes"/>
    <pathelement location="${rets-client.jar}"/>
    <pathelement location="${commons-cli.jar}"/>
    <pathelement path="${commons-lang.jar}"/>
    <pathelement path="${hibernate.jar}"/>
    <pathelement path="${log4j.jar}"/>
  </path>

  <path id="datagen.path">
<!--     <pathelement location="${rets-client.jar}"/> -->
    <pathelement location="${commons-cli.jar}"/>
    <pathelement path="build/hibernate/classes"/>
  </path>

  <path id="webapp.path">
    <pathelement path="${servlet.jar}"/>
    <pathelement path="${log4j.jar}"/>
    <pathelement path="${commons-lang.jar}"/>
    <pathelement location="build/embedded/classes"/>
    <pathelement path="${hibernate.jar}"/>
    <pathelement location="build/hibernate/jar/retsdb2-hibernate.jar"/>
    <fileset dir="${struts.lib}" includes="*.jar"/>
    <pathelement path="${httpunit.jar}"/>
    <pathelement path="${antlr.jar}"/>
  </path>

  <path id="admin.path">
    <pathelement path="${jdom.jar}"/>
  </path>

  <path id="xdoclet.path">
    <pathelement path="${ant.home}/lib/ant.jar" />
    <fileset dir="${xdoclet.lib}" includes="commons-*.jar"/>
    <pathelement location="${xdoclet.jar}"/>
    <pathelement location="${xdoclet.xdoclet.jar}"/>
    <pathelement location="${xjavadoc.jar}"/>
  </path>

  <!-- Add the checkstyle task -->
<!--   <taskdef name="checkstyle" -->
<!--            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"> -->
<!--     <classpath> -->
<!--       <pathelement path="${checkstyle.jar}" /> -->
<!--     </classpath> -->
<!--   </taskdef> -->

  <target name="prepare">
    <mkdir dir="build/hibernate/final/classes"/>
    <mkdir dir="build/hibernate/generated"/>
    <mkdir dir="build/hibernate/generated/org/realtors/rets/server/dmql"/>
    <mkdir dir="build/hibernate/schema"/>
    <mkdir dir="build/hibernate/jar"/>
    <mkdir dir="build/hibernate/classes"/>
    <mkdir dir="build/hibernate/test/classes"/>
    <mkdir dir="build/hibernate/doc"/>
    <mkdir dir="build/embedded/classes"/>
    <mkdir dir="build/importer/classes"/>
    <mkdir dir="build/importer/lib"/>
    <mkdir dir="build/importer/bin"/>
    <mkdir dir="build/datagen/classes"/>
    <mkdir dir="build/datagen/lib"/>
    <mkdir dir="build/datagen/bin"/>
    <mkdir dir="build/rets-server/lib"/>
    <mkdir dir="build/rets-server/webapp/WEB-INF/classes"/>
    <mkdir dir="build/rets-server/webapp/WEB-INF/lib"/>
    <mkdir dir="build/rets-server/webapp/WEB-INF/tld"/>
    <mkdir dir="build/webapp/test/classes"/>
    <mkdir dir="build/admin/classes"/>
    <mkdir dir="build/admin/test/classes"/>
    <mkdir dir="build/tests"/>
    <mkdir dir="dist" />
  </target>

  <target name="build" description="Build all"
          depends="build-hibernate,build-webapp,build-importer,build-admin" />

  <target name="dist" depends="" />

  <target name="build-hibernate" depends="prepare">
    <antlr target="project/hibernate/java/org/realtors/rets/server/dmql/dmql.g"
           outputdirectory="build/hibernate/generated/org/realtors/rets/server/dmql"/>
    <javac target="${compile.vmtarget}" destdir="build/hibernate/classes"
           optimize="${compile.optimize}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <src path="project/hibernate/java"/>
      <src path="build/hibernate/generated"/>
      <classpath>
        <path refid="hibernate.path" />
      </classpath>
    </javac>
    <javac target="${compile.vmtarget}" srcdir="project/hibernate/test/java"
           destdir="build/hibernate/test/classes"
           optimize="${compile.optimize}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="hibernate.path" />
        <pathelement location="build/hibernate/classes"/>
      </classpath>
    </javac>
    <jar destfile="build/hibernate/jar/${project.name}-hibernate.jar"
         basedir="build/hibernate/classes"
         excludes="hibernate.properties" index="true"/>
  </target>

  <target name="build-hibernate-xdoclet" depends="prepare"
          description="Run xdoclet on the hibernate classes">
    <taskdef name="hibernatedoclet"
             classname="xdoclet.modules.hibernate.HibernateDocletTask">
      <classpath>
        <path refid="xdoclet.path"/>
        <path location="${xdoclet.hibernate.jar}"/>
      </classpath>
    </taskdef>
    <hibernatedoclet destdir="build/hibernate/xdoclet" verbose="false"
                     mergedir="project/hibernate/java">
      <fileset dir="project/hibernate/java" includes="**/*.java"/>
      <hibernate version="2.0"/>
    </hibernatedoclet>
    <jar destfile="build/hibernate/jar/${project.name}-hbm-xml.jar"
         basedir="build/hibernate/xdoclet" index="true"/>
    <copy todir="build/rets-server/webapp/WEB-INF/classes"
          file="build/hibernate/jar/${project.name}-hbm-xml.jar"/>
  </target>

  <target name="build-hibernate-xschema" depends="build-hibernate"
          description="creates the schema">
    <taskdef name="schemaexport"
             classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="build/hibernate/classes"/>
      </classpath>
    </taskdef>

    <schemaexport properties="project/hibernate/config/hibernate.properties"
                  quiet="${hibernate.schema.quiet}"
                  text="${hibernate.schema.text.only}"
                  drop="no" delimiter=";"
                  output="build/hibernate/schema/xschema-export.sql">
      <fileset dir="build/hibernate/xdoclet">
        <include name="**/*.hbm.xml"/>
      </fileset>
    </schemaexport>
  </target>

  <target name="hibernate-run">
    <copy todir="build/hibernate/jar"
          file="project/hibernate/config/hibernate.properties"/>
    <copy todir="build/hibernate/jar"
          file="project/hibernate/config/cache.ccf"/>
    <java classname="org.realtors.rets.server.Admin"
          fork="true">
<!--       <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/> -->
      <classpath>
        <path refid="hibernate.path" />
        <pathelement location="build/hibernate/jar/retsdb2-hibernate.jar"/>
        <pathelement location="build/hibernate/jar"/>
        <pathelement location="${hibernate.jdbc.jar}"/>
        <fileset dir="${hibernate.lib}" includes="*.jar"/>
      </classpath>
      <arg line="${admin.args}"/>
    </java>
  </target>

  <target name="doc-api" depends="prepare" description="build the api docs">
    <javadoc packagenames="org.realtors.rets.*"
             destdir="build/doc/api"
             author="true"
             version="true"
             use="true"
             windowtitle="Retzilla API"
             private="${javadoc.private}"
             doctitle="Retzilla API">
      <link offline="true"
            href="http://java.sun.com/j2se/1.3/docs/api/"
            packageListLoc="${javadoc.1.3.local}"/>
      <sourcepath>
        <pathelement location="project/embedded/java"/>
        <pathelement location="project/hibernate/java"/>
        <pathelement location="project/importer/java"/>
        <pathelement location="project/webapp/java"/>
        <pathelement location="project/datagen/java"/>
      </sourcepath>
      <classpath>
        <path refid="hibernate.path"/>
        <path refid="lib.path"/>
        <path refid="embedded.path"/>
        <path refid="importer.path"/>
        <path refid="webapp.path"/>
      </classpath>
      <tag name="hibernate.class" scope="all" description="Hibernate Class"/>
      <tag name="hibernate.id" scope="all" description="Hibernate ID"/>
      <tag name="hibernate.many-to-one" scope="all"
           description="Hibernate Many-To-One"/>
      <tag name="hibernate.property" scope="all"
           description="Hibernate Property"/>
      <tag name="hibernate.column" scope="all"
           description="Hibernate Column"/>
      <tag name="hibernate.collection-key" scope="all"
           description="Hibernate Collection-Key"/>
      <tag name="hibernate.collection-many-to-many" scope="all"
           description="Hibernate Collection-Many-To-Many"/>
      <tag name="hibernate.collection-element" scope="all"
           description="Hibernate Collection-Element"/>
      <tag name="hibernate.set" scope="all" description="Hibernate Set"/>
      <tag name="hibernate.collection-one-to-many" scope="all"
           description="Hibernate Collection-One-To-Many"/>
      <tag name="hibernate.map" scope="all" description="Hibernate Map"/>
      <tag name="hibernate.collection-index" scope="all"
           description="Hibernate Collection-Index"/>
	  <tag name="hibernate.jcs-cache" scope="all"
	       description="Hibernate JCD Cache"/>
	  <tag name="hibernate.collection-jcs-cache" scope="all"
	       description="Hibernate Collection JCD Cache"/>	     
      <tag name="web.servlet-mapping" scope="all"
           description="Servlet Mapping"/>
      <tag name="web.servlet" scope="all" description="Servlet"/>
      <tag name="web.filter" scope="all" description="Filter"/>
      <tag name="web.filter-init-param" scope="all"
           description="Filter Init-Param"/>
    </javadoc>
  </target>

  <target name="doc" depends="doc-api"
          description="Build generated documentation"/>

  <target name="build-embedded" depends="prepare">
    <depend srcDir="project/embedded/java"
            destDir="build/embedded/classes"
            cache="build/embedded/depcache" closure="yes">
      <classpath>
        <path refid="embedded.path" />
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/embedded/java"
           destdir="build/embedded/classes"
           optimize="${compile.optimize}"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="embedded.path" />
      </classpath>
    </javac>

    <jar jarfile="build/rets-server/lib/rets-server.jar"
         basedir="build/embedded/classes"
         manifest="project/build/rets-server.manifest"/>
    <copy todir="build/rets-server/lib">
      <fileset dir="${tomcat.home}/bin">
        <include name="bootstrap.jar"/>
      </fileset>
    </copy>
    <copy todir="build/rets-server/lib">
      <fileset dir="${tomcat.home}/common/lib">
        <include name="servlet.jar"/>
        <include name="naming-common.jar"/>
        <include name="naming-resources.jar"/>
        <include name="commons-collections.jar"/>
        <include name="jasper-compiler.jar"/>
        <include name="jasper-runtime.jar"/>
        <include name="ant.jar"/>
      </fileset>
    </copy>
    <copy todir="build/rets-server/lib">
      <fileset dir="${tomcat.home}/server/lib">
        <include name="catalina.jar"/>
        <include name="commons-digester.jar"/>
        <include name="tomcat-coyote.jar"/>
        <include name="tomcat-util.jar"/>
        <include name="tomcat-http11.jar"/>
        <include name="commons-logging.jar"/>
        <include name="commons-beanutils.jar"/>
        <include name="servlets-common.jar"/>
        <include name="servlets-default.jar"/>
      </fileset>
    </copy>
    <copy tofile="build/rets-server/lib/tools.jar" file="${jdk.tools.jar}"/>

    <copy tofile="build/rets-server/lib/log4j.jar" file="${log4j.jar}"/>
  </target>

  <target name="build-webapp-webdoclet">
    <taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
      <classpath>
        <path refid="xdoclet.path"/>
        <path location="${xdoclet.web.jar}"/>
        <pathelement location="${servlet.jar}"/>
      </classpath>
    </taskdef>
    <webdoclet destdir="build/webapp/generated" verbose="false">
      <fileset dir="project/webapp/java"/>

      <deploymentdescriptor servletspec="2.3"
                            destdir="build/rets-server/webapp/WEB-INF"
                            sessiontimeout="30"
                            mergedir="project/webapp/config/web-merge"
                            displayname="CRT RETS Server"
                            description="CRT RETS Server">
      </deploymentdescriptor>
      <jsptaglib jspversion="1.2" destdir="build/rets-server/webapp/WEB-INF/tld"
                 shortname="cct" filename="cct.tld" />
    </webdoclet>
  </target>

  <target name="build-webapp" depends="build-hibernate,build-embedded"
          description="Build webapp">
    <depend srcDir="project/webapp/java"
            destDir="build/rets-server/webapp/WEB-INF/classes"
            cache="build/depcache" closure="yes">
      <classpath>
        <path refid="webapp.path"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/webapp/java"
           destdir="build/rets-server/webapp/WEB-INF/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="webapp.path"/>
      </classpath>
    </javac>

    <depend srcDir="project/webapp/test/java"
            destDir="build/webapp/test/classes"
            cache="build/depcache" closure="yes">
      <classpath>
        <path refid="webapp.path"/>
        <pathelement location="build/rets-server/webapp/WEB-INF/classes"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/webapp/test/java"
            destDir="build/webapp/test/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="webapp.path"/>
        <pathelement location="build/rets-server/webapp/WEB-INF/classes"/>
      </classpath>
    </javac>

    <copy todir="build/rets-server/webapp">
      <fileset dir="project/webapp/content" includes="**/*"/>
    </copy>

    <copy todir="build/rets-server/webapp/WEB-INF/classes">
      <fileset dir="project/webapp/java" includes="**/*" excludes="**/*.java"/>
    </copy>
    <copy todir="build/webapp/test/classes">
      <fileset dir="project/webapp/test/java" includes="**/*"
               excludes="**/*.java"/>
    </copy>

    <antcall target="build-webapp-webdoclet"/>
    <copy todir="build/rets-server/conf">
      <fileset dir="project/embedded/config" includes="*"/>
    </copy>
    <copy file="project/webapp/config/tomcat-users.xml"
          todir="build/rets-server/conf"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib"
          file="build/hibernate/jar/${project.name}-hibernate.jar"/>
    <copy todir="build/rets-server/webapp/WEB-INF/classes"
          file="build/hibernate/jar/${project.name}-hbm-xml.jar"/>
    <copy todir="build/rets-server/webapp/WEB-INF/classes"
          file="project/hibernate/config/hibernate.properties"/>
    <copy todir="build/rets-server/webapp/WEB-INF/classes"
          file="project/hibernate/config/cache.ccf"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib"
          file="${commons-lang.jar}"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib"
          file="${log4j.jar}"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib"
          file="${hibernate.jar}"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib">
      <fileset dir="${hibernate.lib}" includes="*.jar"/>
    </copy>
    <copy todir="build/rets-server/webapp/WEB-INF/lib"
          file="${hibernate.jdbc.jar}"/>
    <copy todir="build/rets-server/webapp/WEB-INF/lib" file="${antlr.jar}"/>

    <!-- copy the struts stuff -->
    <copy todir="build/rets-server/webapp/WEB-INF"
          file="project/webapp/config/struts-config.xml"/>
    <copy todir="build/rets-server/webapp/WEB-INF"
          file="project/webapp/config/validation.xml"/>
    <copy todir="build/rets-server/webapp/WEB-INF"
          file="project/webapp/config/validator-rules.xml"/>
    <copy todir="build/rets-server/webapp/WEB-INF/classes">
      <fileset dir="project/webapp/config/properties/" includes="*" />
    </copy>
    <copy todir="build/rets-server/webapp/WEB-INF/tld">
      <fileset dir="${struts.lib}" includes="*.tld" />
    </copy>
    <copy todir="build/rets-server/webapp/WEB-INF/lib">
      <fileset dir="${struts.lib}" includes="*.jar" />
    </copy>
  </target>

  <target name="build-datagen" depends="build-hibernate"
          description="Builds generates dummy data for testing">
    <depend srcDir="project/datagen/java"
            destDir="build/datagen/classes"
            cache="build/datagen/depcache" closure="yes">
      <classpath>
        <path refid="datagen.path"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/datagen/java"
           destdir="build/datagen/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="datagen.path"/>
      </classpath>
    </javac>

    <copy file="project/datagen/shell/runDatagen"
          todir="build/datagen/bin"/>
    <chmod file="build/datagen/bin/runDatagen" perm="ugo+rx"/>
    <copy file="project/datagen/shell/runBenchmark"
          todir="build/datagen/bin"/>
    <chmod file="build/datagen/bin/runBenchmark" perm="ugo+rx"/>
    <copy file="${commons-lang.jar}" todir="build/datagen/lib"/>
    <copy file="${commons-logging.jar}" todir="build/datagen/lib"/>
    <copy file="${log4j.jar}" todir="build/datagen/lib"/>
    <copy file="${jdom.jar}" todir="build/datagen/lib"/>
    <copy file="${commons-cli.jar}" todir="build/datagen/lib"/>
    <copy file="build/hibernate/jar/${project.name}-hibernate.jar"
          todir="build/datagen/lib"/>
    <copy file="build/hibernate/jar/${project.name}-hbm-xml.jar"
          todir="build/datagen/classes"/>

    <!-- this copies the hibernate stuff we need -->
    <copy todir="build/datagen/lib">
      <fileset dir="${hibernate.lib}" includes="*.jar"
               excludes="j2ee.jar,xerces.jar,ant.jar,junit.jar,jaas.jar" />
    </copy>
    <copy todir="build/datagen/lib"
          file="${hibernate.jar}"/>
    <copy todir="build/datagen/classes"
          file="project/hibernate/config/hibernate.properties"/>
    <copy todir="build/datagen/classes"
          file="project/hibernate/config/cache.ccf"/>
    <copy todir="build/datagen/lib" file="${hibernate.jdbc.jar}"/>
  </target>


  
  <target name="build-importer" depends="build-hibernate"
          description="Builds the data and metadata importers">
    <depend srcDir="project/importer/java"
            destDir="build/importer/classes"
            cache="build/importer/depcache" closure="yes">
      <classpath>
        <path refid="importer.path"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/importer/java"
           destdir="build/importer/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="importer.path"/>
      </classpath>
    </javac>

    <copy file="project/importer/shell/runImporter"
          todir="build/importer/bin"/>
    <chmod file="build/importer/bin/runImporter" perm="ugo+rx"/>
    <copy file="project/importer/shell/runSchema"
          todir="build/importer/bin"/>
    <chmod file="build/importer/bin/runSchema" perm="ugo+rx"/>
    <copy file="${rets-client.jar}" todir="build/importer/lib"/>
    <copy file="${commons-lang.jar}" todir="build/importer/lib"/>
    <copy file="${httpclient.jar}" todir="build/importer/lib"/>
    <copy file="${commons-logging.jar}" todir="build/importer/lib"/>
    <copy file="${log4j.jar}" todir="build/importer/lib"/>
    <copy file="${jdom.jar}" todir="build/importer/lib"/>
    <copy file="${commons-cli.jar}" todir="build/importer/lib"/>
    <copy file="build/hibernate/jar/${project.name}-hibernate.jar"
          todir="build/importer/lib"/>
    <copy file="build/hibernate/jar/${project.name}-hbm-xml.jar"
          todir="build/importer/classes"/>

    <!-- this copies the hibernate stuff we need -->
    <copy todir="build/importer/lib">
      <fileset dir="${hibernate.lib}" includes="*.jar"
               excludes="j2ee.jar,xerces.jar,ant.jar,junit.jar,jaas.jar,commons-lang.jar" />
    </copy>
    <copy todir="build/importer/lib"
          file="${hibernate.jar}"/>
    <copy todir="build/importer/classes"
          file="project/hibernate/config/hibernate.properties"/>
    <copy todir="build/importer/classes"
          file="project/hibernate/config/cache.ccf"/>
<!--     <copy todir="build/importer/lib" -->
<!--           file="code/hibernate/config/hibernate.properties.dist"/> -->

    <!-- Oh yeah, the jdbc driver would be nice. -->
    <copy todir="build/importer/lib" file="${hibernate.jdbc.jar}"/>
  </target>

  <target name="build-admin" depends="prepare"
          description="Builds the admin tool">
    <depend srcDir="project/admin/java"
            destDir="build/admin/classes"
            cache="build/admin/depcache" closure="yes">
      <classpath>
        <path refid="admin.path"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/admin/java"
           destdir="build/admin/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="admin.path"/>
      </classpath>
    </javac>

    <!-- build the test code -->
    <depend srcDir="project/admin/test/java"
            destDir="build/admin/test/classes"
            cache="build/admin/test/depcache" closure="yes">
      <classpath>
        <path refid="admin.path"/>
        <pathelement location="build/admin/classes"/>
      </classpath>
    </depend>
    <javac target="${compile.vmtarget}" srcdir="project/admin/test/java"
           destdir="build/admin/test/classes"
           optimize="${compile.optimize}" debug="${compile.debug}"
           deprecation="${compile.deprecation}">
      <classpath>
        <path refid="admin.path"/>
        <pathelement location="build/admin/classes"/>
      </classpath>
    </javac>
  </target>
          
  <target name="test" description="Run all unit tests" depends="build">
    <junit printsummary="yes" haltonfailure="yes">
      <classpath>
        <pathelement path="${java.class.path}"/>
        <path refid="hibernate.path"/>
        <path refid="webapp.path"/>
        <path refid="embedded.path"/>
        <pathelement path="${servlet.jar}"/>
        <pathelement path="${log4j.jar}"/>
        <pathelement path="${commons-lang.jar}"/>
        <pathelement location="build/hibernate/classes"/>
        <pathelement location="build/rets-server/webapp/WEB-INF/classes"/>
        <pathelement location="build/hibernate/test/classes"/>
        <pathelement location="build/webapp/test/classes"/>
        <pathelement location="build/admin/classes"/>
        <pathelement location="build/admin/test/classes"/>
        <path refid="lib.path"/>
      </classpath>
      <jvmarg value="-Dtest.webapp=${basedir}/build/rets-server/webapp"/>

      <formatter type="plain"/>
      <test fork="yes" name="test.AllTests" outfile="build/tests/results"/>
    </junit>
  </target>

  <target name="clean" description="Cleans all ant targets">
    <delete dir="build" />
    <delete dir="dist" />
  </target>

  <target name="full-classpath" description="string of full classpath">
    <path id="full-classpath">
      <path refid="hibernate.path"/>
      <path refid="lib.path"/>
      <path refid="embedded.path"/>
      <path refid="importer.path"/>
      <path refid="webapp.path"/>
    </path>
    <property name="cp" refid="full-classpath"/>
    <echo message="${cp}"/>
  </target>

</project>
